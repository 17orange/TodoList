@model IEnumerable<TodoList.Models.DisplayTaskViewModel>

@{
    ViewBag.Title = "Task List";
}

<div class="jumbotron">
    <h1>Tasks to be Done</h1>
</div>

<div class="row">
    <div class="col-lg-10">
        @using Microsoft.AspNet.Identity
        @if (Request.IsAuthenticated)
        {
            <p>@Html.ActionLink("Create a Task", "Create", "Task", routeValues: null, htmlAttributes: new { @class="btn btn-default"})</p>
        }
        else
        {
            <p>Please @Html.ActionLink("log in", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" }) if you'd like to add a new task.</p>
        }
    </div>

    @{
        string currentUser = "";
        foreach (var item in Model)
        {
            if( item.UserID != currentUser )
            {
                if( currentUser != "")
                {
                    @:</div>
                }
                @:<div class="col-lg-10">
            <p>Tasks for @Html.DisplayFor(modelItem => item.Username)</p>
                currentUser = item.UserID;
            }
            <div @{ 
                // style the div based on the task status
                string className = "expandableDiv col-lg-10";
                if( item.StatusID != TodoList.Models.Status.COMPLETE && (item.DeadlineTime != null) && (item.DeadlineTime < DateTime.Now) )
                {
                    className += " overDue";
                }
                else if (item.StatusID == TodoList.Models.Status.NEEDS_DONE)
                {
                    className += " needsDone";
                }
                else if (item.StatusID == TodoList.Models.Status.IN_PROGRESS)
                {
                    className += " inProgress";
                }
                else if (item.StatusID == TodoList.Models.Status.COMPLETE)
                {
                    className += " complete";
                }
                @:class="@className"
              }>
                <div>
                    <span class="taskName">@Html.DisplayFor(modelItem => item.Name)</span>
                    <span class="deadline">
                        @if (item.StatusID == TodoList.Models.Status.COMPLETE)
                        {
                            @:Completed: @Html.DisplayFor(modelItem => item.CompletionTime)
                        }
                        else if (item.DeadlineTime == null)
                        {
                            @:No deadline
                        }
                        else
                        {
                            @:Deadline: @Html.DisplayFor(modelItem => item.DeadlineTime)
                        }
                    </span>
                </div>
                <div class="expansion col-lg-8" style="display:none;">
                    <p>Details:</p>
                    <p>@Html.DisplayFor(modelItem => item.Description)</p>
                    @if (Request.IsAuthenticated && item.UserID == User.Identity.GetUserId())
                    {
                        <table style="border-collapse:separate; border-spacing:20px;">
                            <tr>
                                <td>@Html.ActionLink("Edit this Task", "Edit", "Task", routeValues: new { id = item.TodoTaskID }, htmlAttributes: new { @class = "btn btn-default" })</td>
                                <td>@Html.ActionLink("Delete this Task", "Delete", "Task", routeValues: new { id = item.TodoTaskID }, htmlAttributes: new { @class = "btn btn-default" })</td>
                                @{
                                if (item.StatusID == TodoList.Models.Status.NEEDS_DONE)
                                {
                                    // add the logic to change this task to the in progress state
                                    using (Html.BeginForm("ChangeStatus", "Task", new { id=item.TodoTaskID, statusID=TodoList.Models.Status.IN_PROGRESS}, FormMethod.Post, htmlAttributes: new { id = ("begin" + item.TodoTaskID) }))
                                    {
                                        @Html.AntiForgeryToken();
                                    }
                                    <td>
                                        <a href="javascript:ConfirmBegin(@item.TodoTaskID);" class="btn btn-default">Begin this Task</a>
                                    </td>
                                }
                                }
                                @{
                                if (item.StatusID != TodoList.Models.Status.COMPLETE)
                                {
                                    // add the logic to change this task to the completed state
                                    using (Html.BeginForm("ChangeStatus", "Task", new { id=item.TodoTaskID, statusID=TodoList.Models.Status.COMPLETE}, FormMethod.Post, htmlAttributes: new { id = ("complete" + item.TodoTaskID) }))
                                    {
                                        @Html.AntiForgeryToken();
                                    }
                                    <td>
                                        <a href="javascript:ConfirmCompletion(@item.TodoTaskID);" class="btn btn-default">Complete this Task</a>
                                    </td>
                                }
                                }
                            </tr>
                        </table>
                    }
                </div>
            </div>
        }
        if (currentUser != "")
        {
        @:</div>
        }
    }
                    </div>

<script type="text/javascript">
    function ConfirmBegin(taskID) {
        // begin task
        if (confirm("Are you sure you want to begin this task?")) {
            $("form#begin" + taskID).submit();
        }
    }

    function ConfirmCompletion(taskID) {
        // complete task
        if (confirm("Are you sure you've completed this task?")) {
            $("form#complete" + taskID).submit();
        }
    }

    function ShowRow(div) {
        div.find(".expansion").css("display", "inline-block");
    }

    function HideRow(div) {
        div.find(".expansion").css("display", "none");
    }

    $(".expandableDiv").hover(function () { ShowRow($(this)); }, function () { HideRow($(this)); });
</script>

